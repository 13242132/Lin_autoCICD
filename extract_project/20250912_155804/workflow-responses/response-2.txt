### ---CRUD_AI_OUTPUT_START---

### ---CLASS_NAMES_START---
controller: NewsController
service: NewsService
repository: NewsRepository
requestClasses: NewsRequests
responseClasses: NewsResponses
### ---CLASS_NAMES_END---

### ---REPOSITORY_START---
package com.example.demo.repository;

import java.util.List;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import org.springframework.data.jpa.repository.Query;

import org.springframework.data.repository.query.Param;

import org.springframework.stereotype.Repository;

import com.example.demo.entity.News;

@Repository
public interface NewsRepository extends JpaRepository<News, Long> {

    // 单表：根据分类查询新闻列表
    @Query("SELECT n FROM News n WHERE (:category IS NULL OR n.source = :category) ORDER BY n.publishedAt DESC")
    List<News> findByCategory(@Param("category") String category);

    // 单表：分页查询新闻列表
    @Query("SELECT n FROM News n ORDER BY n.publishedAt DESC")
    List<News> findAllOrderedByPublishedAtDesc(Pageable pageable);

    // 单表：根据分类和分页查询新闻列表
    @Query("SELECT n FROM News n WHERE (:category IS NULL OR n.source = :category) ORDER BY n.publishedAt DESC")
    List<News> findByCategoryAndPageable(@Param("category") String category, Pageable pageable);

    // 单表：获取新闻总数（用于分页计算）
    @Query("SELECT COUNT(n) FROM News n")
    long countAll();

    // 单表：根据分类获取新闻总数
    @Query("SELECT COUNT(n) FROM News n WHERE (:category IS NULL OR n.source = :category)")
    long countByCategory(@Param("category") String category);

    // 单表：根据ID查询新闻
    @Query("SELECT n FROM News n WHERE n.id = :id")
    Optional<News> findById(@Param("id") Long id);

    // 单表：保存新闻
    default News saveNews(News news) {
        return save(news);
    }

    // 单表：删除新闻
    default void deleteNewsById(Long id) {
        deleteById(id);
    }

}
### ---REPOSITORY_END---

### ---REQUEST_CLASSES_START---
package com.example.demo.request;

public class NewsRequests {

    public static class GetNewsListRequest {
        private String category;
        private Integer page;
        private Integer size;

        public GetNewsListRequest(String category, Integer page, Integer size) {
            this.category = category;
            this.page = page != null ? page : 1;
            this.size = size != null ? size : 10;
        }

        public String getCategory() { return category; }
        public Integer getPage() { return page; }
        public Integer getSize() { return size; }
    }

}
### ---REQUEST_CLASSES_END---

### ---SERVICE_START---
package com.example.demo.service;

import java.util.List;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.example.demo.entity.News;

import com.example.demo.repository.NewsRepository;

import com.example.demo.request.NewsRequests;

@Service
public class NewsService {

    private final NewsRepository repository;

    public NewsService(NewsRepository repository) {
        this.repository = repository;
    }

    // 调用数据库层：查询新闻列表
    public List<News> getNewsList(NewsRequests.GetNewsListRequest request) {
        int page = request.getPage() - 1; // 转换为从0开始的页码
        int size = request.getSize();
        Pageable pageable = PageRequest.of(page, size);

        if (request.getCategory() == null || request.getCategory().isEmpty()) {
            return repository.findAllOrderedByPublishedAtDesc(pageable);
        } else {
            return repository.findByCategoryAndPageable(request.getCategory(), pageable);
        }
    }

    // 查询指定ID的新闻
    public Optional<News> getNewsById(Long id) {
        return repository.findById(id);
    }

    // 创建新闻（可选）
    public News createNews(News news) {
        return repository.saveNews(news);
    }

    // 删除新闻（可选）
    public void deleteNewsById(Long id) {
        repository.deleteNewsById(id);
    }

}
### ---SERVICE_END---

### ---RESPONSE_CLASSES_START---
package com.example.demo.response;

import java.time.LocalDateTime;
import java.util.List;

public class NewsResponses {

    public static class NewsItem {
        private Long id;
        private String title;
        private String source;
        private LocalDateTime publishedAt;
        private String summary;

        public NewsItem(Long id, String title, String source, LocalDateTime publishedAt, String summary) {
            this.id = id;
            this.title = title;
            this.source = source;
            this.publishedAt = publishedAt;
            this.summary = summary;
        }

        public Long getId() { return id; }
        public String getTitle() { return title; }
        public String getSource() { return source; }
        public LocalDateTime getPublishedAt() { return publishedAt; }
        public String getSummary() { return summary; }
    }

    public static class GetNewsListResponse {
        private List<NewsItem> data;

        public GetNewsListResponse(List<NewsItem> data) {
            this.data = data;
        }

        public List<NewsItem> getData() { return data; }
    }

    public static class ErrorResponse {
        private String error;
        private String message;

        public ErrorResponse(String error, String message) {
            this.error = error;
            this.message = message;
        }

        public String getError() { return error; }
        public String getMessage() { return message; }
    }

}
### ---RESPONSE_CLASSES_END---

### ---CONTROLLER_START---
package com.example.demo.controller;

import java.util.List;

import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.example.demo.entity.News;

import com.example.demo.service.NewsService;

import com.example.demo.request.NewsRequests;

import com.example.demo.response.NewsResponses;

@RestController
@RequestMapping("/api/news")
public class NewsController {

    private final NewsService service;

    public NewsController(NewsService service) {
        this.service = service;
    }

    // 查询新闻列表
    @GetMapping
    public ResponseEntity<?> getNewsList(
            @RequestParam(value = "category", required = false) String category,
            @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
            @RequestParam(value = "size", required = false, defaultValue = "10") Integer size) {

        try {
            NewsRequests.GetNewsListRequest request = new NewsRequests.GetNewsListRequest(category, page, size);
            List<News> newsList = service.getNewsList(request);

            // 转换为响应格式
            List<NewsResponses.NewsItem> responseItems = newsList.stream()
                .map(news -> new NewsResponses.NewsItem(
                    news.getId(),
                    news.getTitle(),
                    news.getSource(),
                    news.getPublishedAt(),
                    news.getSummary()
                ))
                .toList();

            return ResponseEntity.ok(new NewsResponses.GetNewsListResponse(responseItems));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new NewsResponses.ErrorResponse("NEWS_AGGREGATION_FAILED", "新闻聚合失败，请检查上游服务"));
        }
    }

    // 获取单条新闻详情
    @GetMapping("/{id}")
    public ResponseEntity<?> getNewsById(@PathVariable Long id) {
        Optional<News> news = service.getNewsById(id);
        if (news.isPresent()) {
            News n = news.get();
            NewsResponses.NewsItem item = new NewsResponses.NewsItem(
                n.getId(),
                n.getTitle(),
                n.getSource(),
                n.getPublishedAt(),
                n.getSummary()
            );
            return ResponseEntity.ok(item);
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body(new NewsResponses.ErrorResponse("NEWS_NOT_FOUND", "新闻不存在"));
        }
    }

}
### ---CONTROLLER_END---