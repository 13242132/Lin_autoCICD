### ---CRUD_AI_OUTPUT_START---

### ---CLASS_NAMES_START---
controller: SubscriptionController
service: SubscriptionService
repository: SubscriptionRepository
requestClasses: SubscriptionRequests
responseClasses: SubscriptionResponses
### ---CLASS_NAMES_END---

### ---REPOSITORY_START---
package com.example.demo.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.example.demo.entity.Subscription;

@Repository
public interface SubscriptionRepository extends JpaRepository<Subscription, Long> {

    // 单表：根据用户ID查询所有订阅
    @Query("SELECT s FROM Subscription s WHERE s.userId = :userId")
    List<Subscription> findByUserId(@Param("userId") Long userId);

    // 单表：根据用户ID和主题名称查询订阅
    @Query("SELECT s FROM Subscription s WHERE s.userId = :userId AND s.topicName = :topicName")
    Optional<Subscription> findByUserIdAndTopicName(@Param("userId") Long userId, @Param("topicName") String topicName);

    // 单表：统计用户订阅总数
    @Query("SELECT COUNT(s) FROM Subscription s WHERE s.userId = :userId")
    long countByUserId(@Param("userId") Long userId);

    // 单表：插入订阅记录
    default Subscription insert(Subscription entity) {
        return save(entity);
    }

    // 单表：根据ID删除订阅记录
    default void deleteById(Long id) {
        deleteById(id);
    }
}
### ---REPOSITORY_END---

### ---REQUEST_CLASSES_START---
package com.example.demo.request;

public class SubscriptionRequests {

    public static class CreateSubscriptionRequest {
        private String topicName;

        public CreateSubscriptionRequest(String topicName) {
            this.topicName = topicName;
        }

        public String getTopicName() {
            return topicName;
        }
    }
}
### ---REQUEST_CLASSES_END---

### ---SERVICE_START---
package com.example.demo.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.entity.Subscription;
import com.example.demo.entity.User;
import com.example.demo.repository.SubscriptionRepository;
import com.example.demo.api.service.UserApiService;
import com.example.demo.request.SubscriptionRequests;

@Service
public class SubscriptionService {

    private final SubscriptionRepository repository;
    private final UserApiService userApiService;

    public SubscriptionService(SubscriptionRepository repository, UserApiService userApiService) {
        this.repository = repository;
        this.userApiService = userApiService;
    }

    // 创建订阅
    public Subscription createSubscription(Long userId, SubscriptionRequests.CreateSubscriptionRequest request) {
        // 检查用户是否存在
        Optional<User> userOpt = userApiService.findById(userId);
        if (!userOpt.isPresent()) {
            throw new RuntimeException("USER_NOT_FOUND");
        }

        // 检查是否超过订阅上限
        long count = repository.countByUserId(userId);
        if (count >= 5) {
            throw new RuntimeException("SUBSCRIPTION_LIMIT_EXCEEDED");
        }

        // 构建订阅对象
        Subscription subscription = new Subscription();
        subscription.setUserId(userId);
        subscription.setTopicName(request.getTopicName());
        subscription.setSubscribedAt(LocalDateTime.now());

        // 保存订阅
        return repository.insert(subscription);
    }

    // 获取用户订阅列表
    public List<Subscription> getSubscriptions(Long userId) {
        // 检查用户是否存在
        Optional<User> userOpt = userApiService.findById(userId);
        if (!userOpt.isPresent()) {
            throw new RuntimeException("USER_NOT_FOUND");
        }

        return repository.findByUserId(userId);
    }

    // 删除订阅
    public void deleteSubscription(Long userId, String topicName) {
        // 检查用户是否存在
        Optional<User> userOpt = userApiService.findById(userId);
        if (!userOpt.isPresent()) {
            throw new RuntimeException("USER_NOT_FOUND");
        }

        // 查找订阅记录
        Optional<Subscription> subscriptionOpt = repository.findByUserIdAndTopicName(userId, topicName);
        if (!subscriptionOpt.isPresent()) {
            throw new RuntimeException("SUBSCRIPTION_NOT_FOUND");
        }

        // 删除订阅记录
        repository.deleteById(subscriptionOpt.get().getId());
    }
}
### ---SERVICE_END---

### ---RESPONSE_CLASSES_START---
package com.example.demo.response;

import java.time.LocalDateTime;
import java.util.List;

public class SubscriptionResponses {

    public static class GetSubscriptionsResponse {
        private Long userId;
        private List<TopicItem> topics;
        private Integer total;

        public GetSubscriptionsResponse(Long userId, List<TopicItem> topics, Integer total) {
            this.userId = userId;
            this.topics = topics;
            this.total = total;
        }

        public Long getUserId() {
            return userId;
        }

        public List<TopicItem> getTopics() {
            return topics;
        }

        public Integer getTotal() {
            return total;
        }

        public static class TopicItem {
            private String topicName;
            private String subscribedAt;

            public TopicItem(String topicName, String subscribedAt) {
                this.topicName = topicName;
                this.subscribedAt = subscribedAt;
            }

            public String getTopicName() {
                return topicName;
            }

            public String getSubscribedAt() {
                return subscribedAt;
            }
        }
    }

    public static class CreateSubscriptionResponse {
        private Long id;
        private Long userId;
        private String topicName;
        private String subscribedAt;

        public CreateSubscriptionResponse(Long id, Long userId, String topicName, String subscribedAt) {
            this.id = id;
            this.userId = userId;
            this.topicName = topicName;
            this.subscribedAt = subscribedAt;
        }

        public Long getId() {
            return id;
        }

        public Long getUserId() {
            return userId;
        }

        public String getTopicName() {
            return topicName;
        }

        public String getSubscribedAt() {
            return subscribedAt;
        }
    }

    public static class ErrorResponse {
        private String error;
        private String message;

        public ErrorResponse(String error, String message) {
            this.error = error;
            this.message = message;
        }

        public String getError() {
            return error;
        }

        public String getMessage() {
            return message;
        }
    }
}
### ---RESPONSE_CLASSES_END---

### ---CONTROLLER_START---
package com.example.demo.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.example.demo.entity.Subscription;
import com.example.demo.request.SubscriptionRequests;
import com.example.demo.response.SubscriptionResponses;
import com.example.demo.service.SubscriptionService;

@RestController
@RequestMapping("/api/users/{userId}/subscriptions")
public class SubscriptionController {

    private final SubscriptionService service;

    public SubscriptionController(SubscriptionService service) {
        this.service = service;
    }

    // 获取用户订阅主题列表
    @GetMapping
    public ResponseEntity<?> getSubscriptions(@PathVariable Long userId) {
        try {
            List<Subscription> subscriptions = service.getSubscriptions(userId);
            // 构造响应体
            List<SubscriptionResponses.GetSubscriptionsResponse.TopicItem> topicItems = 
                subscriptions.stream()
                    .map(sub -> new SubscriptionResponses.GetSubscriptionsResponse.TopicItem(
                        sub.getTopicName(),
                        sub.getSubscribedAt().toString()
                    ))
                    .toList();

            SubscriptionResponses.GetSubscriptionsResponse response = 
                new SubscriptionResponses.GetSubscriptionsResponse(userId, topicItems, subscriptions.size());

            return ResponseEntity.ok(response);
        } catch (RuntimeException e) {
            if ("USER_NOT_FOUND".equals(e.getMessage())) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new SubscriptionResponses.ErrorResponse("USER_NOT_FOUND", "用户不存在"));
            }
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new SubscriptionResponses.ErrorResponse("INTERNAL_ERROR", "服务器内部错误"));
        }
    }

    // 创建用户订阅
    @PostMapping
    public ResponseEntity<?> createSubscription(@PathVariable Long userId, @RequestBody SubscriptionRequests.CreateSubscriptionRequest request) {
        try {
            Subscription subscription = service.createSubscription(userId, request);
            SubscriptionResponses.CreateSubscriptionResponse response =
                new SubscriptionResponses.CreateSubscriptionResponse(
                    subscription.getId(),
                    subscription.getUserId(),
                    subscription.getTopicName(),
                    subscription.getSubscribedAt().toString()
                );
            return ResponseEntity.status(HttpStatus.CREATED).body(response);
        } catch (RuntimeException e) {
            if ("SUBSCRIPTION_LIMIT_EXCEEDED".equals(e.getMessage())) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new SubscriptionResponses.ErrorResponse("SUBSCRIPTION_LIMIT_EXCEEDED", "最多可订阅5个主题"));
            } else if ("USER_NOT_FOUND".equals(e.getMessage())) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new SubscriptionResponses.ErrorResponse("USER_NOT_FOUND", "用户不存在"));
            }
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new SubscriptionResponses.ErrorResponse("INTERNAL_ERROR", "服务器内部错误"));
        }
    }

    // 删除用户订阅
    @DeleteMapping("/{topicName}")
    public ResponseEntity<?> deleteSubscription(@PathVariable Long userId, @PathVariable String topicName) {
        try {
            service.deleteSubscription(userId, topicName);
            return ResponseEntity.noContent().build();
        } catch (RuntimeException e) {
            if ("SUBSCRIPTION_NOT_FOUND".equals(e.getMessage())) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new SubscriptionResponses.ErrorResponse("SUBSCRIPTION_NOT_FOUND", "订阅记录不存在"));
            } else if ("USER_NOT_FOUND".equals(e.getMessage())) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new SubscriptionResponses.ErrorResponse("USER_NOT_FOUND", "用户不存在"));
            }
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(new SubscriptionResponses.ErrorResponse("INTERNAL_ERROR", "服务器内部错误"));
        }
    }
}
### ---CONTROLLER_END---