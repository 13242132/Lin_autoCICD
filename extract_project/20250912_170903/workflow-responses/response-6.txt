### ---CRUD_AI_OUTPUT_START---

### ---CLASS_NAMES_START---
controller: UserHistoryController
service: UserHistoryService
repository: UserHistoryRepository
requestClasses: UserHistoryRequests
responseClasses: UserHistoryResponses
### ---CLASS_NAMES_END---

### ---REPOSITORY_START---
package com.example.demo.repository;

import java.util.List;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import org.springframework.data.jpa.repository.Query;

import org.springframework.data.repository.query.Param;

import org.springframework.stereotype.Repository;

import com.example.demo.entity.UserHistory;

@Repository
public interface UserHistoryRepository extends JpaRepository<UserHistory, Long> {

    // 单表：插入用户阅读历史
    default UserHistory insert(UserHistory entity) {
        return save(entity);
    }

    // 单表：根据用户ID和新闻ID查询阅读历史
    @Query("SELECT uh FROM UserHistory uh WHERE uh.userId = :userId AND uh.newsId = :newsId")
    Optional<UserHistory> findByUserIdAndNewsId(@Param("userId") Long userId, @Param("newsId") Long newsId);

    // 单表：根据用户ID分页查询阅读历史
    @Query("SELECT uh FROM UserHistory uh WHERE uh.userId = :userId ORDER BY uh.readAt DESC")
    List<UserHistory> findByUserId(@Param("userId") Long userId);

    // 单表：删除用户阅读历史（JPA自带deleteById已满足）
    default void deleteById(Long id) {
        deleteById(id);
    }
}
### ---REPOSITORY_END---

### ---REQUEST_CLASSES_START---
package com.example.demo.request;

public class UserHistoryRequests {

    public static class UpdateUserHistoryRequest {
        private Long newsId;
        private String readAt;

        public UpdateUserHistoryRequest(Long newsId, String readAt) {
            this.newsId = newsId;
            this.readAt = readAt;
        }

        public Long getNewsId() { return newsId; }
        public String getReadAt() { return readAt; }
    }

    public static class GetUserHistoryRequest {
        private Integer page;
        private Integer size;

        public GetUserHistoryRequest(Integer page, Integer size) {
            this.page = page;
            this.size = size;
        }

        public Integer getPage() { return page; }
        public Integer getSize() { return size; }
    }
}
### ---REQUEST_CLASSES_END---

### ---SERVICE_START---
package com.example.demo.service;

import java.util.List;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Service;

import com.example.demo.entity.UserHistory;

import com.example.demo.entity.News;

import com.example.demo.repository.UserHistoryRepository;

import com.example.demo.api.querydto.NewsQueryDTO;

import com.example.demo.api.service.NewsApiService;

import com.example.demo.request.UserHistoryRequests;

import com.example.demo.response.UserHistoryResponses;

@Service
public class UserHistoryService {

    private final UserHistoryRepository repository;

    // 引入外部模块的Service
    @Autowired
    private NewsApiService newsApiService;

    public UserHistoryService(UserHistoryRepository repository) {
        this.repository = repository;
    }

    // 调用数据库层：更新用户阅读历史
    public UserHistory updateUserHistory(Long userId, UserHistoryRequests.UpdateUserHistoryRequest request) {
        // 先检查新闻是否存在
        Optional<News> newsOpt = newsApiService.findById(request.getNewsId());
        if (!newsOpt.isPresent()) {
            throw new RuntimeException("INVALID_NEWS_ID");
        }

        // 创建新的UserHistory对象
        UserHistory history = new UserHistory();
        history.setUserId(userId);
        history.setNewsId(request.getNewsId());
        history.setTitle(newsOpt.get().getTitle());
        history.setSource(newsOpt.get().getSource());
        history.setReadAt(java.time.LocalDateTime.parse(request.getReadAt()));

        return repository.insert(history);
    }

    // 调用数据库层：获取用户阅读历史
    public List<UserHistory> getUserHistory(Long userId, UserHistoryRequests.GetUserHistoryRequest request) {
        // 假设分页逻辑在Repository或Service中处理，这里简化只取所有记录
        return repository.findByUserId(userId);
    }
}
### ---SERVICE_END---

### ---RESPONSE_CLASSES_START---
package com.example.demo.response;

import java.util.List;

public class UserHistoryResponses {

    public static class UpdateUserHistoryResponse {
        private Long id;
        private Long userId;
        private Long newsId;
        private String title;
        private String source;
        private String readAt;

        public UpdateUserHistoryResponse(Long id, Long userId, Long newsId, String title, String source, String readAt) {
            this.id = id;
            this.userId = userId;
            this.newsId = newsId;
            this.title = title;
            this.source = source;
            this.readAt = readAt;
        }

        public Long getId() { return id; }
        public Long getUserId() { return userId; }
        public Long getNewsId() { return newsId; }
        public String getTitle() { return title; }
        public String getSource() { return source; }
        public String getReadAt() { return readAt; }
    }

    public static class GetUserHistoryResponse {
        private List<UserHistoryItem> items;
        private Long total;
        private Integer page;
        private Integer size;

        public GetUserHistoryResponse(List<UserHistoryItem> items, Long total, Integer page, Integer size) {
            this.items = items;
            this.total = total;
            this.page = page;
            this.size = size;
        }

        public List<UserHistoryItem> getItems() { return items; }
        public Long getTotal() { return total; }
        public Integer getPage() { return page; }
        public Integer getSize() { return size; }

        public static class UserHistoryItem {
            private Long id;
            private Long userId;
            private Long newsId;
            private String title;
            private String source;
            private String readAt;

            public UserHistoryItem(Long id, Long userId, Long newsId, String title, String source, String readAt) {
                this.id = id;
                this.userId = userId;
                this.newsId = newsId;
                this.title = title;
                this.source = source;
                this.readAt = readAt;
            }

            public Long getId() { return id; }
            public Long getUserId() { return userId; }
            public Long getNewsId() { return newsId; }
            public String getTitle() { return title; }
            public String getSource() { return source; }
            public String getReadAt() { return readAt; }
        }
    }
}
### ---RESPONSE_CLASSES_END---

### ---CONTROLLER_START---
package com.example.demo.controller;

import java.util.List;

import org.springframework.http.HttpStatus;

import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.*;

import com.example.demo.entity.UserHistory;

import com.example.demo.service.UserHistoryService;

import com.example.demo.request.UserHistoryRequests;

import com.example.demo.response.UserHistoryResponses;

@RestController
@RequestMapping("/api/users/{userId}/history")
public class UserHistoryController {

    private final UserHistoryService service;

    public UserHistoryController(UserHistoryService service) {
        this.service = service;
    }

    // 更新用户阅读历史
    @PostMapping
    public ResponseEntity<?> updateHistory(@PathVariable Long userId, @RequestBody UserHistoryRequests.UpdateUserHistoryRequest request) {
        try {
            UserHistory history = service.updateUserHistory(userId, request);
            return ResponseEntity.status(HttpStatus.CREATED).body(new UserHistoryResponses.UpdateUserHistoryResponse(
                history.getId(),
                history.getUserId(),
                history.getNewsId(),
                history.getTitle(),
                history.getSource(),
                history.getReadAt().toString()
            ));
        } catch (RuntimeException e) {
            if ("INVALID_NEWS_ID".equals(e.getMessage())) {
                return ResponseEntity.badRequest().body(new ErrorResponse("INVALID_NEWS_ID", "新闻ID无效"));
            }
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    // 获取用户阅读历史
    @GetMapping
    public ResponseEntity<?> getHistory(@PathVariable Long userId, @RequestParam(required = false, defaultValue = "1") Integer page,
                                        @RequestParam(required = false, defaultValue = "10") Integer size) {
        UserHistoryRequests.GetUserHistoryRequest req = new UserHistoryRequests.GetUserHistoryRequest(page, size);
        List<UserHistory> histories = service.getUserHistory(userId, req);

        // 构造返回结果
        List<UserHistoryResponses.GetUserHistoryResponse.UserHistoryItem> items = histories.stream()
            .map(h -> new UserHistoryResponses.GetUserHistoryResponse.UserHistoryItem(
                h.getId(),
                h.getUserId(),
                h.getNewsId(),
                h.getTitle(),
                h.getSource(),
                h.getReadAt().toString()
            )).toList();

        return ResponseEntity.ok(new UserHistoryResponses.GetUserHistoryResponse(
            items,
            (long) histories.size(),
            page,
            size
        ));
    }

    // 错误响应类
    private static class ErrorResponse {
        private String error;
        private String message;

        public ErrorResponse(String error, String message) {
            this.error = error;
            this.message = message;
        }

        public String getError() { return error; }
        public String getMessage() { return message; }
    }
}
### ---CONTROLLER_END---