### ---AUTH_AI_OUTPUT_START---

### ---CLASS_NAMES_START---

controller: AuthController  
service: AuthService  
repository: AuthRepository  
requestClasses: AuthRequests  
responseClasses: AuthResponses  

### ---CLASS_NAMES_END---

### ---REPOSITORY_START---

```java
package com.example.demo.auth.repository;

import com.example.demo.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.Optional;

@Repository
public interface AuthRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
    Optional<User> findByEmail(String email);
    Optional<User> findByUsernameOrEmail(String username, String email);
}
```

### ---REPOSITORY_END---

### ---REQUEST_CLASSES_START---

```java
package com.example.demo.auth.request;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.Data;

public class AuthRequests {

    @Data
    public static class RegisterRequest {
        @NotBlank(message = "用户名不能为空")
        private String username;

        @NotBlank(message = "邮箱不能为空")
        @Email(message = "邮箱格式不合法")
        private String email;

        @NotBlank(message = "密码不能为空")
        @Pattern(
            regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$",
            message = "密码必须至少8位，包含大小写字母和数字"
        )
        private String password;
    }

    @Data
    public static class LoginRequest {
        @NotBlank(message = "用户名或邮箱不能为空")
        private String usernameOrEmail;

        @NotBlank(message = "密码不能为空")
        private String password;
    }
}
```

### ---REQUEST_CLASSES_END---

### ---SERVICE_START---

```java
package com.example.demo.auth.service;

import com.example.demo.entity.User;
import com.example.demo.auth.repository.AuthRepository;
import com.example.demo.auth.util.JwtUtil;
import com.example.demo.auth.response.AuthResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import java.time.LocalDateTime;

@Service
public class AuthService {

    @Autowired
    private AuthRepository authRepository;

    public AuthResponses.RegisterResponse register(String username, String email, String password) {
        // 检查用户名或邮箱是否已存在
        if (authRepository.findByUsernameOrEmail(username, email).isPresent()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "REGISTRATION_FAILED", 
                new RuntimeException("用户名或邮箱已存在"));
        }

        User user = new User();
        user.setUsername(username);
        user.setEmail(email);
        user.setPassword(password); // 实际项目中应加密存储
        user.setStatus("active");
        user.setCreatedAt(LocalDateTime.now());

        authRepository.save(user);

        return new AuthResponses.RegisterResponse(
            user.getId(),
            user.getUsername(),
            user.getEmail(),
            user.getCreatedAt()
        );
    }

    public AuthResponses.LoginResponse login(String usernameOrEmail, String password) {
        User user = authRepository.findByUsernameOrEmail(usernameOrEmail, usernameOrEmail)
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.UNAUTHORIZED, "INVALID_CREDENTIALS",
                new RuntimeException("用户名/邮箱或密码错误")));

        if (!user.getPassword().equals(password)) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "INVALID_CREDENTIALS",
                new RuntimeException("用户名/邮箱或密码错误"));
        }

        String token = JwtUtil.generateToken(user.getId());
        AuthResponses.UserInfo userInfo = new AuthResponses.UserInfo(
            user.getId(),
            user.getUsername(),
            user.getEmail()
        );

        return new AuthResponses.LoginResponse(token, userInfo);
    }
}
```

### ---SERVICE_END---

### ---RESPONSE_CLASSES_START---

```java
package com.example.demo.auth.response;

import lombok.Data;
import java.time.LocalDateTime;

public class AuthResponses {

    @Data
    public static class RegisterResponse {
        private Long id;
        private String username;
        private String email;
        private LocalDateTime createdAt;

        public RegisterResponse(Long id, String username, String email, LocalDateTime createdAt) {
            this.id = id;
            this.username = username;
            this.email = email;
            this.createdAt = createdAt;
        }
    }

    @Data
    public static class LoginResponse {
        private String token;
        private UserInfo user;

        public LoginResponse(String token, UserInfo user) {
            this.token = token;
            this.user = user;
        }
    }

    @Data
    public static class UserInfo {
        private Long userId;
        private String username;
        private String email;

        public UserInfo(Long userId, String username, String email) {
            this.userId = userId;
            this.username = username;
            this.email = email;
        }
    }
}
```

### ---RESPONSE_CLASSES_END---

### ---CONTROLLER_START---

```java
package com.example.demo.auth.controller;

import com.example.demo.auth.service.AuthService;
import com.example.demo.auth.request.AuthRequests;
import com.example.demo.auth.response.AuthResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import org.springframework.http.HttpStatus;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private AuthService authService;

    @PostMapping("/register")
    public ResponseEntity<AuthResponses.RegisterResponse> register(@RequestBody AuthRequests.RegisterRequest request) {
        AuthResponses.RegisterResponse response = authService.register(
            request.getUsername(),
            request.getEmail(),
            request.getPassword()
        );
        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    @PostMapping("/login")
    public ResponseEntity<AuthResponses.LoginResponse> login(@RequestBody AuthRequests.LoginRequest request) {
        AuthResponses.LoginResponse response = authService.login(
            request.getUsernameOrEmail(),
            request.getPassword()
        );
        return ResponseEntity.ok(response);
    }
}
```

### ---CONTROLLER_END---

### ---CRUD_AI_OUTPUT_START---

### ---CLASS_NAMES_START---
controller: NewsController
service: NewsService
repository: NewsRepository
requestClasses: NewsRequests
responseClasses: NewsResponses
### ---CLASS_NAMES_END---

### ---REPOSITORY_START---
package com.example.demo.repository;

import java.util.List;
import java.util.Optional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import com.example.demo.entity.News;

@Repository
public interface NewsRepository extends JpaRepository<News, Long> {
    
    // 单表：根据分类查询新闻列表
    @Query("SELECT n FROM News n WHERE (:category IS NULL OR n.category = :category)")
    Page<News> findByCategory(@Param("category") String category, Pageable pageable);
    
    // 单表：根据ID查询新闻
    @Query("SELECT n FROM News n WHERE n.id = :id")
    Optional<News> findById(@Param("id") Long id);
    
    // 单表：查询所有新闻（用于分页）
    @Query("SELECT n FROM News n")
    Page<News> findAll(Pageable pageable);
    
    // 单表：根据分类和时间范围查询新闻（扩展功能）
    @Query("SELECT n FROM News n WHERE (:category IS NULL OR n.category = :category) AND n.publishedAt >= :startDate AND n.publishedAt <= :endDate")
    Page<News> findByCategoryAndDateRange(
        @Param("category") String category,
        @Param("startDate") java.time.LocalDateTime startDate,
        @Param("endDate") java.time.LocalDateTime endDate,
        Pageable pageable);
}
### ---REPOSITORY_END---

### ---REQUEST_CLASSES_START---
package com.example.demo.request;

import lombok.Data;

public class NewsRequests {
    
    @Data
    public static class GetNewsListRequest {
        private String category;
        private Integer page = 1;
        private Integer size = 10;
    }
}
### ---REQUEST_CLASSES_END---

### ---SERVICE_START---
package com.example.demo.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import com.example.demo.entity.News;
import com.example.demo.repository.NewsRepository;
import com.example.demo.request.NewsRequests;
import com.example.demo.response.NewsResponses;

@Service
public class NewsService {
    
    private final NewsRepository repository;
    
    public NewsService(NewsRepository repository) {
        this.repository = repository;
    }
    
    // 调用数据库层：分页获取新闻列表
    public NewsResponses.GetNewsListResponse getNewsList(NewsRequests.GetNewsListRequest request) {
        // 构造分页请求
        Pageable pageable = PageRequest.of(request.getPage() - 1, request.getSize());
        
        // 查询分页数据
        Page<News> newsPage = repository.findByCategory(request.getCategory(), pageable);
        
        // 构建响应
        NewsResponses.GetNewsListResponse response = new NewsResponses.GetNewsListResponse();
        response.setContent(newsPage.getContent().stream()
                .map(news -> {
                    NewsResponses.GetNewsListResponse.NewsItem item = new NewsResponses.GetNewsListResponse.NewsItem();
                    item.setId(news.getId());
                    item.setTitle(news.getTitle());
                    item.setSource(news.getSource());
                    item.setPublishedAt(news.getPublishedAt().toString());
                    item.setSummary(news.getSummary());
                    return item;
                })
                .collect(Collectors.toList()));
        
        response.setTotalElements(newsPage.getTotalElements());
        response.setTotalPages(newsPage.getTotalPages());
        response.setNumber(newsPage.getNumber());
        
        return response;
    }
}
### ---SERVICE_END---

### ---RESPONSE_CLASSES_START---
package com.example.demo.response;

import java.util.List;
import lombok.Data;

public class NewsResponses {
    
    @Data
    public static class GetNewsListResponse {
        private List<NewsItem> content;
        private long totalElements;
        private int totalPages;
        private int number;
        
        @Data
        public static class NewsItem {
            private Long id;
            private String title;
            private String source;
            private String publishedAt;
            private String summary;
        }
    }
}
### ---RESPONSE_CLASSES_END---

### ---CONTROLLER_START---
package com.example.demo.controller;

import java.util.Optional;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.example.demo.entity.News;
import com.example.demo.service.NewsService;
import com.example.demo.request.NewsRequests;
import com.example.demo.response.NewsResponses;

@RestController
@RequestMapping("/api/news")
public class NewsController {
    
    private final NewsService service;
    
    public NewsController(NewsService service) {
        this.service = service;
    }
    
    // 获取新闻列表
    @GetMapping
    public ResponseEntity<?> getNewsList(NewsRequests.GetNewsListRequest request) {
        try {
            NewsResponses.GetNewsListResponse response = service.getNewsList(request);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ErrorResponse("FETCH_NEWS_FAILED", "无法从第三方源获取新闻数据"));
        }
    }
    
    // 错误响应类
    private static class ErrorResponse {
        private String error;
        private String message;
        
        public ErrorResponse(String error, String message) {
            this.error = error;
            this.message = message;
        }
        
        // Getters and Setters
        public String getError() { return error; }
        public void setError(String error) { this.error = error; }
        public String getMessage() { return message; }
        public void setMessage(String message) { this.message = message; }
    }
}
### ---CONTROLLER_END---
### ---CRUD_AI_OUTPUT_END---

### ---CRUD_AI_OUTPUT_START---

### ---CLASS_NAMES_START---
controller: SubscriptionController
service: SubscriptionService
repository: SubscriptionRepository
requestClasses: SubscriptionRequests
responseClasses: SubscriptionResponses
### ---CLASS_NAMES_END---

### ---REPOSITORY_START---
package com.example.demo.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.example.demo.entity.Subscription;

@Repository
public interface SubscriptionRepository extends JpaRepository<Subscription, Long> {

    // 单表：根据用户ID查询所有订阅记录
    @Query("SELECT s FROM Subscription s WHERE s.userId = :userId")
    List<Subscription> findByUserId(@Param("userId") Long userId);

    // 单表：根据用户ID和主题名查询订阅记录
    @Query("SELECT s FROM Subscription s WHERE s.userId = :userId AND s.topicName = :topicName")
    Optional<Subscription> findByUserIdAndTopicName(@Param("userId") Long userId, @Param("topicName") String topicName);

    // 单表：统计用户订阅数量
    @Query("SELECT COUNT(s) FROM Subscription s WHERE s.userId = :userId")
    long countByUserId(@Param("userId") Long userId);

    // 单表：根据ID删除订阅记录
    default void deleteById(Long id) {
        super.deleteById(id);
    }

    // 单表：保存订阅记录
    default Subscription save(Subscription entity) {
        return super.save(entity);
    }
}
### ---REPOSITORY_END---

### ---REQUEST_CLASSES_START---
package com.example.demo.request;

import lombok.Data;

public class SubscriptionRequests {

    @Data
    public static class CreateSubscriptionRequest {
        private Long userId;
        private String topicName;
    }

    @Data
    public static class GetSubscriptionsRequest {
        private Long userId;
    }

    @Data
    public static class DeleteSubscriptionRequest {
        private Long id;
    }
}
### ---REQUEST_CLASSES_END---

### ---SERVICE_START---
package com.example.demo.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.entity.Subscription;
import com.example.demo.entity.Topic;
import com.example.demo.repository.SubscriptionRepository;
import com.example.demo.request.SubscriptionRequests;
import com.example.demo.response.SubscriptionResponses;

@Service
public class SubscriptionService {

    private final SubscriptionRepository repository;

    public SubscriptionService(SubscriptionRepository repository) {
        this.repository = repository;
    }

    // 创建订阅关系
    public SubscriptionResponses.CreateSubscriptionResponse createSubscription(SubscriptionRequests.CreateSubscriptionRequest request) {
        // 检查用户是否已订阅该主题
        Optional<Subscription> existingSubscription = repository.findByUserIdAndTopicName(request.getUserId(), request.getTopicName());
        if (existingSubscription.isPresent()) {
            throw new RuntimeException("SUBSCRIPTION_ALREADY_EXISTS");
        }

        // 检查用户订阅数量限制
        long subscriptionCount = repository.countByUserId(request.getUserId());
        if (subscriptionCount >= 5) {
            throw new RuntimeException("SUBSCRIPTION_LIMIT_EXCEEDED");
        }

        // 创建新的订阅记录
        Subscription subscription = new Subscription();
        subscription.setUserId(request.getUserId());
        subscription.setTopicName(request.getTopicName());
        subscription.setSubscribedAt(LocalDateTime.now());

        Subscription savedSubscription = repository.save(subscription);

        // 构造响应
        SubscriptionResponses.CreateSubscriptionResponse response = new SubscriptionResponses.CreateSubscriptionResponse();
        response.setId(savedSubscription.getId());
        response.setUserId(savedSubscription.getUserId());
        response.setTopicName(savedSubscription.getTopicName());
        response.setSubscribedAt(savedSubscription.getSubscribedAt().toString());

        return response;
    }

    // 获取用户订阅主题
    public SubscriptionResponses.GetSubscriptionsResponse getSubscriptions(SubscriptionRequests.GetSubscriptionsRequest request) {
        List<Subscription> subscriptions = repository.findByUserId(request.getUserId());

        if (subscriptions.isEmpty()) {
            throw new RuntimeException("SUBSCRIPTION_NOT_FOUND");
        }

        // 构造响应
        SubscriptionResponses.GetSubscriptionsResponse response = new SubscriptionResponses.GetSubscriptionsResponse();
        response.setUserId(request.getUserId());
        response.setTopics(subscriptions.stream()
                .map(sub -> {
                    SubscriptionResponses.GetSubscriptionsResponse.TopicItem item = new SubscriptionResponses.GetSubscriptionsResponse.TopicItem();
                    item.setTopicName(sub.getTopicName());
                    item.setSubscribedAt(sub.getSubscribedAt().toString());
                    return item;
                })
                .collect(Collectors.toList()));

        return response;
    }

    // 删除订阅关系
    public void deleteSubscription(SubscriptionRequests.DeleteSubscriptionRequest request) {
        Optional<Subscription> subscription = repository.findById(request.getId());
        if (!subscription.isPresent()) {
            throw new RuntimeException("SUBSCRIPTION_NOT_FOUND");
        }
        repository.deleteById(request.getId());
    }
}
### ---SERVICE_END---

### ---RESPONSE_CLASSES_START---
package com.example.demo.response;

import java.util.List;
import lombok.Data;

public class SubscriptionResponses {

    @Data
    public static class CreateSubscriptionResponse {
        private Long id;
        private Long userId;
        private String topicName;
        private String subscribedAt;
    }

    @Data
    public static class GetSubscriptionsResponse {
        private Long userId;
        private List<TopicItem> topics;

        @Data
        public static class TopicItem {
            private String topicName;
            private String subscribedAt;
        }
    }

    @Data
    public static class ErrorResponse {
        private String error;
        private String message;
    }
}
### ---RESPONSE_CLASSES_END---

### ---CONTROLLER_START---
package com.example.demo.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.example.demo.entity.Subscription;
import com.example.demo.request.SubscriptionRequests;
import com.example.demo.response.SubscriptionResponses;
import com.example.demo.service.SubscriptionService;

@RestController
@RequestMapping("/api/subscriptions")
public class SubscriptionController {

    private final SubscriptionService service;

    public SubscriptionController(SubscriptionService service) {
        this.service = service;
    }

    // 获取用户订阅主题
    @GetMapping
    public ResponseEntity<?> getSubscriptions(@RequestParam Long userId) {
        try {
            SubscriptionRequests.GetSubscriptionsRequest request = new SubscriptionRequests.GetSubscriptionsRequest();
            request.setUserId(userId);
            SubscriptionResponses.GetSubscriptionsResponse response = service.getSubscriptions(request);
            return ResponseEntity.ok(response);
        } catch (RuntimeException e) {
            if ("SUBSCRIPTION_NOT_FOUND".equals(e.getMessage())) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(new SubscriptionResponses.ErrorResponse("SUBSCRIPTION_NOT_FOUND", "未找到该用户的订阅记录"));
            } else {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(new SubscriptionResponses.ErrorResponse("INTERNAL_ERROR", "服务器内部错误"));
            }
        }
    }

    // 创建订阅关系
    @PostMapping
    public ResponseEntity<?> createSubscription(@RequestBody SubscriptionRequests.CreateSubscriptionRequest request) {
        try {
            SubscriptionResponses.CreateSubscriptionResponse response = service.createSubscription(request);
            return ResponseEntity.status(HttpStatus.CREATED).body(response);
        } catch (RuntimeException e) {
            if ("SUBSCRIPTION_LIMIT_EXCEEDED".equals(e.getMessage())) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .body(new SubscriptionResponses.ErrorResponse("SUBSCRIPTION_LIMIT_EXCEEDED", "用户最多可订阅5个主题"));
            } else if ("SUBSCRIPTION_ALREADY_EXISTS".equals(e.getMessage())) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .body(new SubscriptionResponses.ErrorResponse("SUBSCRIPTION_ALREADY_EXISTS", "用户已订阅该主题"));
            } else {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(new SubscriptionResponses.ErrorResponse("INTERNAL_ERROR", "服务器内部错误"));
            }
        }
    }

    // 删除订阅关系
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteSubscription(@PathVariable Long id) {
        try {
            SubscriptionRequests.DeleteSubscriptionRequest request = new SubscriptionRequests.DeleteSubscriptionRequest();
            request.setId(id);
            service.deleteSubscription(request);
            return ResponseEntity.noContent().build();
        } catch (RuntimeException e) {
            if ("SUBSCRIPTION_NOT_FOUND".equals(e.getMessage())) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(new SubscriptionResponses.ErrorResponse("SUBSCRIPTION_NOT_FOUND", "指定的订阅记录不存在"));
            } else {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(new SubscriptionResponses.ErrorResponse("INTERNAL_ERROR", "服务器内部错误"));
            }
        }
    }
}
### ---CONTROLLER_END---
### ---CRUD_AI_OUTPUT_END---

{
  "workflow": {
    "name": "GetHotTopicsWorkflow",
    "description": "获取热门主题的业务工作流",
    "steps": [
      {
        "name": "ValidateRequest",
        "action": "validate_count_param",
        "input": {
          "count": "${request.count}"
        }
      },
      {
        "name": "FetchTopics",
        "action": "query_topics_by_article_count",
        "input": {
          "limit": "${validated_count}"
        }
      },
      {
        "name": "FormatResponse",
        "action": "format_topics_response",
        "input": {
          "topics": "${fetched_topics}"
        }
      }
    ],
    "output": {
      "success": {
        "status_code": 200,
        "topics": "${formatted_topics}"
      },
      "error": {
        "status_code": 500,
        "error": "FETCH_TOPICS_FAILED",
        "message": "获取热门主题失败"
      }
    }
  }
}

### ---CRUD_AI_OUTPUT_START---

### ---CLASS_NAMES_START---
controller: ProfileController
service: ProfileService
repository: ProfileRepository
requestClasses: ProfileRequests
responseClasses: ProfileResponses
### ---CLASS_NAMES_END---

### ---REPOSITORY_START---
package com.example.demo.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.example.demo.entity.User;
import com.example.demo.entity.Subscription;

@Repository
public interface ProfileRepository extends JpaRepository<User, Long> {

    // 单表：根据ID查询用户
    @Query("SELECT u FROM User u WHERE u.id = :id")
    Optional<User> findById(@Param("id") Long id);

    // 单表：根据用户ID查询订阅主题
    @Query("SELECT s.topicName FROM Subscription s WHERE s.userId = :userId")
    List<String> findSubscriptionsByUserId(@Param("userId") Long userId);
}
### ---REPOSITORY_END---

### ---REQUEST_CLASSES_START---
package com.example.demo.request;

import lombok.Data;

public class ProfileRequests {

    @Data
    public static class GetProfileRequest {
        private Long userId;
    }
}
### ---REQUEST_CLASSES_END---

### ---SERVICE_START---
package com.example.demo.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.entity.User;
import com.example.demo.entity.Subscription;
import com.example.demo.repository.ProfileRepository;
import com.example.demo.api.querydto.SubscriptionQueryDTO;
import com.example.demo.api.service.SubscriptionApiService;
import com.example.demo.request.ProfileRequests;
import com.example.demo.response.ProfileResponses;

@Service
public class ProfileService {

    private final ProfileRepository repository;

    @Autowired
    private SubscriptionApiService subscriptionApiService;

    public ProfileService(ProfileRepository repository) {
        this.repository = repository;
    }

    // 调用数据库层：获取用户基本信息及订阅列表
    public ProfileResponses.GetProfileResponse getProfile(Long userId) {
        Optional<User> userOpt = repository.findById(userId);
        if (!userOpt.isPresent()) {
            return null; // 返回null表示用户不存在，由Controller处理
        }

        User user = userOpt.get();

        // 查询用户的订阅主题
        List<String> subscriptions = repository.findSubscriptionsByUserId(userId);

        // 构造响应对象
        ProfileResponses.GetProfileResponse response = new ProfileResponses.GetProfileResponse();
        response.setId(user.getId());
        response.setUsername(user.getUsername());
        response.setEmail(user.getEmail());
        response.setAvatar(user.getAvatar());
        response.setStatus(user.getStatus());
        response.setCreatedAt(user.getCreatedAt().toString()); // 转换为字符串格式
        response.setSubscriptions(subscriptions);

        return response;
    }

    // 获取用户订阅信息（多表接口）
    public List<String> getUserSubscriptions(Long userId) {
        return repository.findSubscriptionsByUserId(userId);
    }
}
### ---SERVICE_END---

### ---RESPONSE_CLASSES_START---
package com.example.demo.response;

import java.util.List;

import lombok.Data;

public class ProfileResponses {

    @Data
    public static class GetProfileResponse {
        private Long id;
        private String username;
        private String email;
        private String avatar;
        private String status;
        private String createdAt;
        private List<String> subscriptions;
    }

    // 错误响应类
    @Data
    public static class ErrorResponse {
        private String error;
        private String message;
    }
}
### ---RESPONSE_CLASSES_END---

### ---CONTROLLER_START---
package com.example.demo.controller;

import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.example.demo.entity.User;
import com.example.demo.service.ProfileService;
import com.example.demo.auth.annotation.CurrentUserId;
import com.example.demo.response.ProfileResponses;

@RestController
@RequestMapping("/api/profile")
public class ProfileController {

    private final ProfileService service;

    public ProfileController(ProfileService service) {
        this.service = service;
    }

    // 获取当前登录用户的基本信息
    @GetMapping
    public ResponseEntity<?> getProfile(@CurrentUserId Long userId) {
        ProfileResponses.GetProfileResponse response = service.getProfile(userId);
        if (response == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new ProfileResponses.ErrorResponse("USER_NOT_FOUND", "用户不存在"));
        }
        return ResponseEntity.ok(response);
    }
}
### ---CONTROLLER_END---
### ---CRUD_AI_OUTPUT_END---



---ENTITY_LIST_START---

@Table(name = "user_tbl")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "username", nullable = false, length = 20)
    private String username;

    @Column(name = "email", nullable = false, length = 100)
    private String email;

    @Column(name = "password", nullable = false, length = 100)
    private String password;

    @Column(name = "status", nullable = false, length = 20)
    private String status = "active";

    @Column(name = "avatar", length = 255)
    private String avatar;

    @Column(name = "created_at", nullable = false)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    private LocalDateTime createdAt = LocalDateTime.now();

    // Getters and Setters
}

@Table(name = "news_tbl")
public class News {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "title", nullable = false, length = 255)
    private String title;

    @Column(name = "source", nullable = false, length = 100)
    private String source;

    @Column(name = "summary", length = 500)
    private String summary;

    @Column(name = "published_at", nullable = false)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    private LocalDateTime publishedAt;

    @Column(name = "url", length = 500)
    private String url;

    @Column(name = "category", length = 50)
    private String category;

    // Getters and Setters
}

@Table(name = "topic_tbl")
public class Topic {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "name", nullable = false, length = 50)
    private String name;

    @Column(name = "description", length = 255)
    private String description;

    @Column(name = "article_count")
    private Integer articleCount = 0;

    @Column(name = "created_at", nullable = false)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    private LocalDateTime createdAt = LocalDateTime.now();

    // Getters and Setters
}

@Table(name = "subscription_tbl")
public class Subscription {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "user_id", nullable = false)
    private Long userId;

    @Column(name = "topic_name", nullable = false, length = 50)
    private String topicName;

    @Column(name = "subscribed_at", nullable = false)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    private LocalDateTime subscribedAt = LocalDateTime.now();

    // Getters and Setters
}

@Table(name = "audit_log_tbl")
public class AuditLog {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "user_id", nullable = false)
    private Long userId;

    @Column(name = "action", nullable = false, length = 100)
    private String action;

    @Column(name = "entity_type", length = 50)
    private String entityType;

    @Column(name = "entity_id")
    private Long entityId;

    @Column(name = "details", length = 1000)
    private String details;

    @Column(name = "ip_address", length = 45)
    private String ipAddress;

    @Column(name = "created_at", nullable = false)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    private LocalDateTime createdAt = LocalDateTime.now();
}

---ENTITY_LIST_END---
