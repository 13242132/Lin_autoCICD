### ---CRUD_AI_OUTPUT_START---

### ---CLASS_NAMES_START---
controller: NewsController
service: NewsService
repository: NewsRepository
requestClasses: NewsRequests
responseClasses: NewsResponses
### ---CLASS_NAMES_END---

### ---REPOSITORY_START---
package com.example.demo.repository;

import java.util.List;
import java.util.Optional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import com.example.demo.entity.News;

@Repository
public interface NewsRepository extends JpaRepository<News, Long> {
    
    // 单表：根据分类查询新闻列表
    @Query("SELECT n FROM News n WHERE (:category IS NULL OR n.category = :category)")
    Page<News> findByCategory(@Param("category") String category, Pageable pageable);
    
    // 单表：根据ID查询新闻
    @Query("SELECT n FROM News n WHERE n.id = :id")
    Optional<News> findById(@Param("id") Long id);
    
    // 单表：查询所有新闻（用于分页）
    @Query("SELECT n FROM News n")
    Page<News> findAll(Pageable pageable);
    
    // 单表：根据分类和时间范围查询新闻（扩展功能）
    @Query("SELECT n FROM News n WHERE (:category IS NULL OR n.category = :category) AND n.publishedAt >= :startDate AND n.publishedAt <= :endDate")
    Page<News> findByCategoryAndDateRange(
        @Param("category") String category,
        @Param("startDate") java.time.LocalDateTime startDate,
        @Param("endDate") java.time.LocalDateTime endDate,
        Pageable pageable);
}
### ---REPOSITORY_END---

### ---REQUEST_CLASSES_START---
package com.example.demo.request;

import lombok.Data;

public class NewsRequests {
    
    @Data
    public static class GetNewsListRequest {
        private String category;
        private Integer page = 1;
        private Integer size = 10;
    }
}
### ---REQUEST_CLASSES_END---

### ---SERVICE_START---
package com.example.demo.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import com.example.demo.entity.News;
import com.example.demo.repository.NewsRepository;
import com.example.demo.request.NewsRequests;
import com.example.demo.response.NewsResponses;

@Service
public class NewsService {
    
    private final NewsRepository repository;
    
    public NewsService(NewsRepository repository) {
        this.repository = repository;
    }
    
    // 调用数据库层：分页获取新闻列表
    public NewsResponses.GetNewsListResponse getNewsList(NewsRequests.GetNewsListRequest request) {
        // 构造分页请求
        Pageable pageable = PageRequest.of(request.getPage() - 1, request.getSize());
        
        // 查询分页数据
        Page<News> newsPage = repository.findByCategory(request.getCategory(), pageable);
        
        // 构建响应
        NewsResponses.GetNewsListResponse response = new NewsResponses.GetNewsListResponse();
        response.setContent(newsPage.getContent().stream()
                .map(news -> {
                    NewsResponses.GetNewsListResponse.NewsItem item = new NewsResponses.GetNewsListResponse.NewsItem();
                    item.setId(news.getId());
                    item.setTitle(news.getTitle());
                    item.setSource(news.getSource());
                    item.setPublishedAt(news.getPublishedAt().toString());
                    item.setSummary(news.getSummary());
                    return item;
                })
                .collect(Collectors.toList()));
        
        response.setTotalElements(newsPage.getTotalElements());
        response.setTotalPages(newsPage.getTotalPages());
        response.setNumber(newsPage.getNumber());
        
        return response;
    }
}
### ---SERVICE_END---

### ---RESPONSE_CLASSES_START---
package com.example.demo.response;

import java.util.List;
import lombok.Data;

public class NewsResponses {
    
    @Data
    public static class GetNewsListResponse {
        private List<NewsItem> content;
        private long totalElements;
        private int totalPages;
        private int number;
        
        @Data
        public static class NewsItem {
            private Long id;
            private String title;
            private String source;
            private String publishedAt;
            private String summary;
        }
    }
}
### ---RESPONSE_CLASSES_END---

### ---CONTROLLER_START---
package com.example.demo.controller;

import java.util.Optional;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.example.demo.entity.News;
import com.example.demo.service.NewsService;
import com.example.demo.request.NewsRequests;
import com.example.demo.response.NewsResponses;

@RestController
@RequestMapping("/api/news")
public class NewsController {
    
    private final NewsService service;
    
    public NewsController(NewsService service) {
        this.service = service;
    }
    
    // 获取新闻列表
    @GetMapping
    public ResponseEntity<?> getNewsList(NewsRequests.GetNewsListRequest request) {
        try {
            NewsResponses.GetNewsListResponse response = service.getNewsList(request);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ErrorResponse("FETCH_NEWS_FAILED", "无法从第三方源获取新闻数据"));
        }
    }
    
    // 错误响应类
    private static class ErrorResponse {
        private String error;
        private String message;
        
        public ErrorResponse(String error, String message) {
            this.error = error;
            this.message = message;
        }
        
        // Getters and Setters
        public String getError() { return error; }
        public void setError(String error) { this.error = error; }
        public String getMessage() { return message; }
        public void setMessage(String message) { this.message = message; }
    }
}
### ---CONTROLLER_END---
### ---CRUD_AI_OUTPUT_END---