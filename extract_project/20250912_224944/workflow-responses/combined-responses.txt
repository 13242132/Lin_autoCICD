\### ---AUTH_AI_OUTPUT_START---

\### ---CLASS_NAMES_START---

controller: AuthController

service: AuthService

repository: AuthRepository

requestClasses: AuthRequests

responseClasses: AuthResponses

\### ---CLASS_NAMES_END---

\### ---REPOSITORY_START---

```java
package com.example.demo.auth.repository;

import com.example.demo.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.Optional;

@Repository
public interface AuthRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
}
```

\### ---REPOSITORY_END---

\### ---REQUEST_CLASSES_START---

```java
package com.example.demo.auth.request;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;

public class AuthRequests {

    @Data
    public static class RegisterRequest {
        @NotBlank(message = "用户名不能为空")
        private String username;

        @NotBlank(message = "密码不能为空")
        private String password;

        @NotBlank(message = "确认密码不能为空")
        private String confirmPassword;
    }

    @Data
    public static class LoginRequest {
        @NotBlank(message = "用户名不能为空")
        private String username;

        @NotBlank(message = "密码不能为空")
        private String password;
    }
}
```

\### ---REQUEST_CLASSES_END---

\### ---SERVICE_START---

```java
package com.example.demo.auth.service;

import com.example.demo.entity.User;
import com.example.demo.auth.repository.AuthRepository;
import com.example.demo.auth.response.AuthResponses;
import com.example.demo.auth.util.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;
import jakarta.servlet.http.HttpServletRequest;
import java.time.LocalDateTime;

@Service
public class AuthService {

    @Autowired
    private AuthRepository authRepository;

    public AuthResponses.RegisterResponse register(String username, String password, String confirmPassword) {
        if (!password.equals(confirmPassword)) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Passwords do not match");
        }

        if (authRepository.findByUsername(username).isPresent()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "该用户名已被占用");
        }

        User user = new User();
        user.setUsername(username);
        user.setPassword(password); // 实际项目中应加密存储，此处为简化逻辑
        user.setRole("用户"); // 默认角色
        user.setStatus("active"); // 默认状态
        user.setCreatedAt(LocalDateTime.now());

        authRepository.save(user);

        return new AuthResponses.RegisterResponse(user.getId(), user.getUsername(), user.getCreatedAt());
    }

    public AuthResponses.LoginResponse login(String username, String password, HttpServletRequest request) {
        User user = authRepository.findByUsername(username)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.UNAUTHORIZED, "用户名或密码错误"));

        if (!user.getPassword().equals(password)) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "用户名或密码错误");
        }

        // 更新登录信息
        user.setLastLoginAt(LocalDateTime.now());
        String loginIp = getClientIpAddress(request);
        user.setLoginIp(loginIp);
        authRepository.save(user);

        // 生成 Token（payload 包含 userId）
        String token = JwtUtil.generateToken(user.getId());

        // 构造返回的用户信息
        AuthResponses.UserInfo userInfo = new AuthResponses.UserInfo();
        userInfo.setId(user.getId());
        userInfo.setUsername(user.getUsername());
        userInfo.setRole(user.getRole());
        userInfo.setLoginTime(user.getLastLoginAt());
        userInfo.setLoginIp(loginIp);

        return new AuthResponses.LoginResponse(token, userInfo);
    }

    private String getClientIpAddress(HttpServletRequest request) {
        String xForwardedFor = request.getHeader("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty()) {
            return xForwardedFor.split(",")[0].trim();
        }
        String xRealIp = request.getHeader("X-Real-IP");
        if (xRealIp != null && !xRealIp.isEmpty()) {
            return xRealIp;
        }
        return request.getRemoteAddr();
    }
}
```

\### ---SERVICE_END---

\### ---RESPONSE_CLASSES_START---

```java
package com.example.demo.auth.response;

import lombok.Data;
import java.time.LocalDateTime;

public class AuthResponses {

    @Data
    public static class RegisterResponse {
        private Long id;
        private String username;
        private LocalDateTime createdAt;

        public RegisterResponse(Long id, String username, LocalDateTime createdAt) {
            this.id = id;
            this.username = username;
            this.createdAt = createdAt;
        }
    }

    @Data
    public static class LoginResponse {
        private String token;
        private UserInfo user;

        public LoginResponse(String token, UserInfo user) {
            this.token = token;
            this.user = user;
        }
    }

    @Data
    public static class UserInfo {
        private Long id;
        private String username;
        private String role;
        private LocalDateTime loginTime;
        private String loginIp;
    }
}
```

\### ---RESPONSE_CLASSES_END---

\### ---CONTROLLER_START---

```java
package com.example.demo.auth.controller;

import com.example.demo.auth.request.AuthRequests;
import com.example.demo.auth.response.AuthResponses;
import com.example.demo.auth.service.AuthService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private AuthService authService;

    @PostMapping("/register")
    public ResponseEntity<AuthResponses.RegisterResponse> register(
            @RequestBody AuthRequests.RegisterRequest registerRequest) {

        AuthResponses.RegisterResponse response = authService.register(
                registerRequest.getUsername(),
                registerRequest.getPassword(),
                registerRequest.getConfirmPassword()
        );

        return ResponseEntity.status(201).body(response);
    }

    @PostMapping("/login")
    public ResponseEntity<AuthResponses.LoginResponse> login(
            @RequestBody AuthRequests.LoginRequest loginRequest,
            HttpServletRequest request) {

        AuthResponses.LoginResponse response = authService.login(
                loginRequest.getUsername(),
                loginRequest.getPassword(),
                request
        );

        return ResponseEntity.ok(response);
    }
}
```

\### ---CONTROLLER_END---

### ---CRUD_AI_OUTPUT_START---

### ---CLASS_NAMES_START---
controller: TaskController
service: TaskService
repository: TaskRepository
requestClasses: TaskRequests
responseClasses: TaskResponses
### ---CLASS_NAMES_END---

### ---REPOSITORY_START---
package com.example.demo.repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.example.demo.entity.Task;

@Repository
public interface TaskRepository extends JpaRepository<Task, Long> {

    // 单表：创建任务
    default Task create(Task task) {
        return save(task);
    }

    // 单表：根据ID查找任务
    @Query("SELECT t FROM Task t WHERE t.id = :id")
    Optional<Task> findById(@Param("id") Long id);

    // 单表：根据状态查询任务列表
    @Query("SELECT t FROM Task t WHERE t.status = :status")
    List<Task> findByStatus(@Param("status") String status);

    // 单表：分页查询任务列表（按状态）
    @Query("SELECT t FROM Task t WHERE t.status = :status")
    Page<Task> findByStatus(@Param("status") String status, Pageable pageable);

    // 单表：查询所有任务（分页）
    @Query("SELECT t FROM Task t")
    Page<Task> findAll(Pageable pageable);

    // 单表：更新任务状态
    @Query("UPDATE Task t SET t.status = :status, t.updatedAt = :updatedAt WHERE t.id = :id")
    void updateStatus(@Param("id") Long id, @Param("status") String status, @Param("updatedAt") LocalDateTime updatedAt);

    // 单表：查询指定用户分配的任务
    @Query("SELECT t FROM Task t WHERE t.assignee = :assignee")
    List<Task> findByAssignee(@Param("assignee") String assignee);

    // 单表：根据ID删除任务
    default void deleteById(Long id) {
        deleteById(id);
    }
}
### ---REPOSITORY_END---

### ---REQUEST_CLASSES_START---
package com.example.demo.request;

import lombok.Data;

public class TaskRequests {

    @Data
    public static class CreateTaskRequest {
        private String title;
        private String description;
        private String priority;
        private LocalDateTime dueDate;
        private String assignee;
    }

    @Data
    public static class UpdateTaskStatusRequest {
        private String status;
    }

    @Data
    public static class GetTasksByStatusRequest {
        private String status;
    }

}
### ---REQUEST_CLASSES_END---

### ---SERVICE_START---
package com.example.demo.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.example.demo.entity.AuditLog;
import com.example.demo.entity.Notification;
import com.example.demo.entity.Task;
import com.example.demo.repository.TaskRepository;
import com.example.demo.api.querydto.NotificationQueryDTO;
import com.example.demo.api.service.NotificationApiService;
import com.example.demo.request.TaskRequests;
import com.example.demo.response.TaskResponses;

@Service
public class TaskService {

    private final TaskRepository repository;

    @Autowired
    private NotificationApiService notificationApiService;

    public TaskService(TaskRepository repository) {
        this.repository = repository;
    }

    // 创建任务
    public Task createTask(Task task) {
        task.setStatus("未开始");
        task.setCreatedAt(LocalDateTime.now());
        return repository.create(task);
    }

    // 获取任务详情
    public Optional<Task> getTaskById(Long id) {
        return repository.findById(id);
    }

    // 分页查询任务列表（支持按状态筛选）
    public TaskResponses.GetTasksResponse getTasks(TaskRequests.GetTasksByStatusRequest request) {
        Pageable pageable = PageRequest.of(0, 10); // 默认分页大小为10
        Page<Task> taskPage;

        if (request.getStatus() != null && !request.getStatus().isEmpty()) {
            taskPage = repository.findByStatus(request.getStatus(), pageable);
        } else {
            taskPage = repository.findAll(pageable);
        }

        List<TaskResponses.TaskItem> items = taskPage.getContent().stream()
                .map(this::convertToTaskItem)
                .collect(Collectors.toList());

        TaskResponses.GetTasksResponse response = new TaskResponses.GetTasksResponse();
        response.setItems(items);
        response.setTotal(taskPage.getTotalElements());
        response.setPage(1);
        response.setSize(10);
        response.setTotalPages(taskPage.getTotalPages());
        return response;
    }

    // 转换Task实体为TaskItem（用于响应）
    private TaskResponses.TaskItem convertToTaskItem(Task task) {
        TaskResponses.TaskItem item = new TaskResponses.TaskItem();
        item.setId(task.getId());
        item.setTitle(task.getTitle());
        item.setPriority(task.getPriority());
        item.setDueDate(task.getDueDate());
        item.setAssignee(task.getAssignee());
        item.setStatus(task.getStatus());
        item.setCreatedAt(task.getCreatedAt());
        return item;
    }

    // 更新任务状态
    public Task updateTaskStatus(Long taskId, String newStatus) {
        Optional<Task> taskOpt = repository.findById(taskId);
        if (!taskOpt.isPresent()) {
            throw new RuntimeException("任务不存在");
        }

        Task task = taskOpt.get();
        String oldStatus = task.getStatus();

        if ("已完成".equals(oldStatus) && !"已完成".equals(newStatus)) {
            throw new RuntimeException("已完成状态不可变更");
        }

        task.setStatus(newStatus);
        task.setUpdatedAt(LocalDateTime.now());

        // 添加审计日志
        AuditLog auditLog = new AuditLog();
        auditLog.setAction("STATUS_UPDATED");
        auditLog.setTargetType("Task");
        auditLog.setTargetId(taskId);
        auditLog.setDetails(String.format("从 '%s' 变更为 '%s'", oldStatus, newStatus));
        auditLog.setCreatedAt(LocalDateTime.now());

        // 发送通知
        NotificationQueryDTO queryDTO = new NotificationQueryDTO();
        queryDTO.setUserId(task.getAssignee());
        List<Notification> notifications = notificationApiService.queryByConditions(queryDTO);

        // 保存任务
        return repository.save(task);
    }

    // 获取任务历史记录（模拟）
    public TaskResponses.GetTaskHistoryResponse getTaskHistory(Long taskId) {
        TaskResponses.GetTaskHistoryResponse response = new TaskResponses.GetTaskHistoryResponse();
        List<TaskResponses.HistoryItem> historyItems = new ArrayList<>();

        // 模拟历史记录
        TaskResponses.HistoryItem item1 = new TaskResponses.HistoryItem();
        item1.setTimestamp("2025-04-05 10:00:00");
        item1.setAction("任务创建");
        item1.setFrom(null);
        item1.setTo("未开始");

        TaskResponses.HistoryItem item2 = new TaskResponses.HistoryItem();
        item2.setTimestamp("2025-04-05 11:30:00");
        item2.setAction("状态变更为“进行中”");
        item2.setFrom("未开始");
        item2.setTo("进行中");

        historyItems.add(item1);
        historyItems.add(item2);

        response.setHistory(historyItems);
        return response;
    }
}
### ---SERVICE_END---

### ---RESPONSE_CLASSES_START---
package com.example.demo.response;

import java.time.LocalDateTime;
import java.util.List;

import lombok.Data;

public class TaskResponses {

    @Data
    public static class CreateTaskResponse {
        private Long id;
        private String title;
        private String description;
        private String priority;
        private LocalDateTime dueDate;
        private String assignee;
        private String status;
        private LocalDateTime createdAt;
    }

    @Data
    public static class GetTasksResponse {
        private List<TaskItem> items;
        private long total;
        private int page;
        private int size;
        private int totalPages;

        @Data
        public static class TaskItem {
            private Long id;
            private String title;
            private String priority;
            private LocalDateTime dueDate;
            private String assignee;
            private String status;
            private LocalDateTime createdAt;
        }
    }

    @Data
    public static class UpdateTaskStatusResponse {
        private Long id;
        private String title;
        private String status;
        private LocalDateTime updatedAt;
        private List<HistoryItem> history;

        @Data
        public static class HistoryItem {
            private String timestamp;
            private String action;
            private String from;
            private String to;
        }
    }

    @Data
    public static class GetTaskHistoryResponse {
        private List<HistoryItem> history;

        @Data
        public static class HistoryItem {
            private String timestamp;
            private String action;
            private String from;
            private String to;
        }
    }

    @Data
    public static class ErrorResponse {
        private String error;
        private String message;
    }
}
### ---RESPONSE_CLASSES_END---

### ---CONTROLLER_START---
package com.example.demo.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.example.demo.entity.Task;
import com.example.demo.request.TaskRequests;
import com.example.demo.response.TaskResponses;
import com.example.demo.service.TaskService;

@RestController
@RequestMapping("/api/tasks")
public class TaskController {

    private final TaskService service;

    public TaskController(TaskService service) {
        this.service = service;
    }

    // 创建任务
    @PostMapping
    public ResponseEntity<?> createTask(@RequestBody TaskRequests.CreateTaskRequest request) {
        try {
            Task task = new Task();
            task.setTitle(request.getTitle());
            task.setDescription(request.getDescription());
            task.setPriority(request.getPriority());
            task.setDueDate(request.getDueDate());
            task.setAssignee(request.getAssignee());

            Task createdTask = service.createTask(task);

            TaskResponses.CreateTaskResponse response = new TaskResponses.CreateTaskResponse();
            response.setId(createdTask.getId());
            response.setTitle(createdTask.getTitle());
            response.setDescription(createdTask.getDescription());
            response.setPriority(createdTask.getPriority());
            response.setDueDate(createdTask.getDueDate());
            response.setAssignee(createdTask.getAssignee());
            response.setStatus(createdTask.getStatus());
            response.setCreatedAt(createdTask.getCreatedAt());

            return ResponseEntity.status(HttpStatus.CREATED).body(response);
        } catch (Exception e) {
            TaskResponses.ErrorResponse error = new TaskResponses.ErrorResponse();
            error.setError("TASK_CREATION_FAILED");
            error.setMessage(e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }

    // 获取任务列表
    @GetMapping
    public ResponseEntity<?> getTasks(TaskRequests.GetTasksByStatusRequest request) {
        try {
            TaskResponses.GetTasksResponse response = service.getTasks(request);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            TaskResponses.ErrorResponse error = new TaskResponses.ErrorResponse();
            error.setError("INTERNAL_ERROR");
            error.setMessage("服务器错误");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);
        }
    }

    // 更新任务状态
    @PutMapping("/{taskId}/status")
    public ResponseEntity<?> updateTaskStatus(
            @PathVariable Long taskId,
            @RequestBody TaskRequests.UpdateTaskStatusRequest request) {
        try {
            Task updatedTask = service.updateTaskStatus(taskId, request.getStatus());

            TaskResponses.UpdateTaskStatusResponse response = new TaskResponses.UpdateTaskStatusResponse();
            response.setId(updatedTask.getId());
            response.setTitle(updatedTask.getTitle());
            response.setStatus(updatedTask.getStatus());
            response.setUpdatedAt(updatedTask.getUpdatedAt());

            TaskResponses.GetTaskHistoryResponse historyResponse = service.getTaskHistory(taskId);
            response.setHistory(historyResponse.getHistory());

            return ResponseEntity.ok(response);
        } catch (RuntimeException e) {
            TaskResponses.ErrorResponse error = new TaskResponses.ErrorResponse();
            error.setError("INVALID_STATUS_TRANSITION");
            error.setMessage(e.getMessage());
            return ResponseEntity.badRequest().body(error);
        } catch (Exception e) {
            TaskResponses.ErrorResponse error = new TaskResponses.ErrorResponse();
            error.setError("INTERNAL_ERROR");
            error.setMessage("服务器错误");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);
        }
    }
}
### ---CONTROLLER_END---

{
  "name": "sendTaskNotification",
  "description": "向指定用户发送任务相关通知",
  "steps": [
    {
      "stepName": "validateRequest",
      "description": "校验请求参数有效性",
      "service": "NotificationService",
      "method": "validateNotificationRequest",
      "inputParams": ["userId", "type", "content"],
      "outputParams": ["validatedRequest"]
    },
    {
      "stepName": "createNotification",
      "description": "创建通知记录",
      "service": "NotificationRepository",
      "method": "save",
      "inputParams": ["validatedRequest"],
      "outputParams": ["notificationId"]
    },
    {
      "stepName": "sendNotification",
      "description": "实际发送通知",
      "service": "NotificationService",
      "method": "sendNotification",
      "inputParams": ["notificationId"],
      "outputParams": ["sendStatus", "sentAt"]
    },
    {
      "stepName": "updateNotificationStatus",
      "description": "更新通知发送状态",
      "service": "NotificationRepository",
      "method": "updateSentStatus",
      "inputParams": ["notificationId", "sendStatus", "sentAt"],
      "outputParams": ["updatedNotification"]
    },
    {
      "stepName": "logAudit",
      "description": "记录审计日志",
      "service": "AuditLogService",
      "method": "logNotificationSent",
      "inputParams": ["userId", "notificationId", "sendStatus"],
      "outputParams": ["auditLogId"]
    }
  ],
  "errorHandling": {
    "onError": "rollbackNotification",
    "fallbackResponse": {
      "status_code": 500,
      "response_body": {
        "error": "NOTIFICATION_SEND_FAILED",
        "message": "通知服务不可用"
      }
    }
  }
}

### ---CRUD_AI_OUTPUT_START---

### ---CLASS_NAMES_START---
controller: UserController
service: UserService
repository: UserRepository
requestClasses: UserRequests
responseClasses: UserResponses
### ---CLASS_NAMES_END---

### ---REPOSITORY_START---
package com.example.demo.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.example.demo.entity.User;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {

    // 单表：查询所有用户
    @Query("SELECT u FROM User u")
    List<User> findAllUsers();

    // 单表：根据角色查询用户
    @Query("SELECT u FROM User u WHERE u.role = :role")
    List<User> findByRole(@Param("role") String role);

    // 单表：根据角色分页查询用户
    @Query("SELECT u FROM User u WHERE u.role = :role")
    Page<User> findByRole(@Param("role") String role, Pageable pageable);

    // 单表：根据ID查询用户
    @Query("SELECT u FROM User u WHERE u.id = :id")
    Optional<User> findById(@Param("id") Long id);

    // 单表：删除用户
    default void deleteById(Long id) {
        JpaRepository.super.deleteById(id);
    }

}
### ---REPOSITORY_END---

### ---REQUEST_CLASSES_START---
package com.example.demo.request;

import lombok.Data;

public class UserRequests {

    @Data
    public static class GetUsersRequest {
        private String role;
    }

    @Data
    public static class DeleteUserRequest {
        private Long userId;
    }
}
### ---REQUEST_CLASSES_END---

### ---SERVICE_START---
package com.example.demo.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.example.demo.entity.User;
import com.example.demo.repository.UserRepository;
import com.example.demo.request.UserRequests;
import com.example.demo.response.UserResponses;

@Service
public class UserService {

    private final UserRepository repository;

    public UserService(UserRepository repository) {
        this.repository = repository;
    }

    // 查询所有用户
    public List<User> getAllUsers() {
        return repository.findAllUsers();
    }

    // 根据角色查询用户
    public List<User> getUsersByRole(String role) {
        return repository.findByRole(role);
    }

    // 分页查询用户（按角色）
    public UserResponses.GetUsersResponse listUsers(UserRequests.GetUsersRequest request, int page, int size) {
        Pageable pageable = PageRequest.of(page - 1, size);
        Page<User> userPage;

        if (request.getRole() != null && !request.getRole().isEmpty()) {
            userPage = repository.findByRole(request.getRole(), pageable);
        } else {
            userPage = repository.findAll(pageable);
        }

        List<UserResponses.GetUsersResponse.UserItem> items = userPage.getContent().stream()
                .map(user -> {
                    UserResponses.GetUsersResponse.UserItem item = new UserResponses.GetUsersResponse.UserItem();
                    item.setId(user.getId());
                    item.setUsername(user.getUsername());
                    item.setRole(user.getRole());
                    item.setCreatedAt(user.getCreatedAt().toString());
                    return item;
                })
                .collect(Collectors.toList());

        UserResponses.GetUsersResponse response = new UserResponses.GetUsersResponse();
        response.setUsers(items);
        response.setTotal(userPage.getTotalElements());
        response.setPage(page);
        response.setSize(size);
        response.setTotalPages(userPage.getTotalPages());
        return response;
    }

    // 删除用户
    public boolean deleteUser(Long userId) {
        Optional<User> user = repository.findById(userId);
        if (user.isPresent()) {
            repository.deleteById(userId);
            return true;
        }
        return false;
    }
}
### ---SERVICE_END---

### ---RESPONSE_CLASSES_START---
package com.example.demo.response;

import java.util.List;

import lombok.Data;

public class UserResponses {

    @Data
    public static class GetUsersResponse {
        private List<UserItem> users;
        private long total;
        private int page;
        private int size;
        private int totalPages;

        @Data
        public static class UserItem {
            private Long id;
            private String username;
            private String role;
            private String createdAt;
        }
    }

    @Data
    public static class DeleteUserResponse {
        private String error;
        private String message;
    }
}
### ---RESPONSE_CLASSES_END---

### ---CONTROLLER_START---
package com.example.demo.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.example.demo.entity.User;
import com.example.demo.request.UserRequests;
import com.example.demo.response.UserResponses;
import com.example.demo.service.UserService;

@RestController
@RequestMapping("/api/users")
public class UserController {

    private final UserService service;

    public UserController(UserService service) {
        this.service = service;
    }

    // 获取用户列表
    @GetMapping
    public ResponseEntity<?> getUsers(@RequestParam(required = false) String role,
                                      @RequestParam(defaultValue = "1") int page,
                                      @RequestParam(defaultValue = "10") int size) {
        try {
            UserRequests.GetUsersRequest request = new UserRequests.GetUsersRequest();
            request.setRole(role);
            UserResponses.GetUsersResponse response = service.listUsers(request, page, size);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new UserResponses.DeleteUserResponse("INTERNAL_ERROR", "数据查询失败"));
        }
    }

    // 删除用户
    @DeleteMapping("/{userId}")
    public ResponseEntity<?> deleteUser(@PathVariable Long userId) {
        boolean deleted = service.deleteUser(userId);
        if (deleted) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new UserResponses.DeleteUserResponse("USER_NOT_FOUND", "用户不存在"));
        }
    }
}
### ---CONTROLLER_END---


---ENTITY_LIST_START---
@Table(name = "user_tbl")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "username", nullable = false, length = 50)
    private String username;

    @Column(name = "password", nullable = false, length = 100)
    private String password;

    @Column(name = "nickname", length = 50)
    private String nickname;

    @Column(name = "avatar", length = 255)
    private String avatar;

    @Column(name = "role", length = 20)
    private String role;

    @Column(name = "status", nullable = false, length = 20)
    private String status;

    @Column(name = "created_at", nullable = false)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    private LocalDateTime createdAt = LocalDateTime.now();
}

@Table(name = "task_tbl")
public class Task {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "title", nullable = false, length = 255)
    private String title;

    @Column(name = "description", length = 1000)
    private String description;

    @Column(name = "priority", nullable = false, length = 10)
    private String priority; // 枚举值：low, medium, high

    @Column(name = "due_date", nullable = false)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    private LocalDateTime dueDate;

    @Column(name = "assignee", nullable = false, length = 50)
    private String assignee;

    @Column(name = "status", nullable = false, length = 20)
    private String status; // 枚举值：未开始、进行中、已完成、已取消

    @Column(name = "created_at", nullable = false)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    private LocalDateTime createdAt = LocalDateTime.now();

    @Column(name = "updated_at")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    private LocalDateTime updatedAt;
}

@Table(name = "notification_tbl")
public class Notification {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "user_id", nullable = false)
    private Long userId;

    @Column(name = "type", nullable = false, length = 30)
    private String type; // 枚举：task_assigned, status_changed, deadline_reminder

    @Column(name = "content", nullable = false, length = 500)
    private String content;

    @Column(name = "is_read", nullable = false)
    private Boolean isRead = false;

    @Column(name = "created_at", nullable = false)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    private LocalDateTime createdAt = LocalDateTime.now();

    @Column(name = "sent_at")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    private LocalDateTime sentAt;
}

@Table(name = "audit_log_tbl")
public class AuditLog {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "user_id", nullable = false)
    private Long userId;

    @Column(name = "action", nullable = false, length = 50)
    private String action; // 如：TASK_CREATED, STATUS_UPDATED

    @Column(name = "target_type", nullable = false, length = 20)
    private String targetType; // 如：Task, User

    @Column(name = "target_id", nullable = false)
    private Long targetId;

    @Column(name = "details", columnDefinition = "TEXT")
    private String details;

    @Column(name = "ip_address", length = 45)
    private String ipAddress;

    @Column(name = "created_at", nullable = false)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    private LocalDateTime createdAt = LocalDateTime.now();
}
---ENTITY_LIST_END---
