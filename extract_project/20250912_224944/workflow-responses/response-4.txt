### ---CRUD_AI_OUTPUT_START---

### ---CLASS_NAMES_START---
controller: UserController
service: UserService
repository: UserRepository
requestClasses: UserRequests
responseClasses: UserResponses
### ---CLASS_NAMES_END---

### ---REPOSITORY_START---
package com.example.demo.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.example.demo.entity.User;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {

    // 单表：查询所有用户
    @Query("SELECT u FROM User u")
    List<User> findAllUsers();

    // 单表：根据角色查询用户
    @Query("SELECT u FROM User u WHERE u.role = :role")
    List<User> findByRole(@Param("role") String role);

    // 单表：根据角色分页查询用户
    @Query("SELECT u FROM User u WHERE u.role = :role")
    Page<User> findByRole(@Param("role") String role, Pageable pageable);

    // 单表：根据ID查询用户
    @Query("SELECT u FROM User u WHERE u.id = :id")
    Optional<User> findById(@Param("id") Long id);

    // 单表：删除用户
    default void deleteById(Long id) {
        JpaRepository.super.deleteById(id);
    }

}
### ---REPOSITORY_END---

### ---REQUEST_CLASSES_START---
package com.example.demo.request;

import lombok.Data;

public class UserRequests {

    @Data
    public static class GetUsersRequest {
        private String role;
    }

    @Data
    public static class DeleteUserRequest {
        private Long userId;
    }
}
### ---REQUEST_CLASSES_END---

### ---SERVICE_START---
package com.example.demo.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.example.demo.entity.User;
import com.example.demo.repository.UserRepository;
import com.example.demo.request.UserRequests;
import com.example.demo.response.UserResponses;

@Service
public class UserService {

    private final UserRepository repository;

    public UserService(UserRepository repository) {
        this.repository = repository;
    }

    // 查询所有用户
    public List<User> getAllUsers() {
        return repository.findAllUsers();
    }

    // 根据角色查询用户
    public List<User> getUsersByRole(String role) {
        return repository.findByRole(role);
    }

    // 分页查询用户（按角色）
    public UserResponses.GetUsersResponse listUsers(UserRequests.GetUsersRequest request, int page, int size) {
        Pageable pageable = PageRequest.of(page - 1, size);
        Page<User> userPage;

        if (request.getRole() != null && !request.getRole().isEmpty()) {
            userPage = repository.findByRole(request.getRole(), pageable);
        } else {
            userPage = repository.findAll(pageable);
        }

        List<UserResponses.GetUsersResponse.UserItem> items = userPage.getContent().stream()
                .map(user -> {
                    UserResponses.GetUsersResponse.UserItem item = new UserResponses.GetUsersResponse.UserItem();
                    item.setId(user.getId());
                    item.setUsername(user.getUsername());
                    item.setRole(user.getRole());
                    item.setCreatedAt(user.getCreatedAt().toString());
                    return item;
                })
                .collect(Collectors.toList());

        UserResponses.GetUsersResponse response = new UserResponses.GetUsersResponse();
        response.setUsers(items);
        response.setTotal(userPage.getTotalElements());
        response.setPage(page);
        response.setSize(size);
        response.setTotalPages(userPage.getTotalPages());
        return response;
    }

    // 删除用户
    public boolean deleteUser(Long userId) {
        Optional<User> user = repository.findById(userId);
        if (user.isPresent()) {
            repository.deleteById(userId);
            return true;
        }
        return false;
    }
}
### ---SERVICE_END---

### ---RESPONSE_CLASSES_START---
package com.example.demo.response;

import java.util.List;

import lombok.Data;

public class UserResponses {

    @Data
    public static class GetUsersResponse {
        private List<UserItem> users;
        private long total;
        private int page;
        private int size;
        private int totalPages;

        @Data
        public static class UserItem {
            private Long id;
            private String username;
            private String role;
            private String createdAt;
        }
    }

    @Data
    public static class DeleteUserResponse {
        private String error;
        private String message;
    }
}
### ---RESPONSE_CLASSES_END---

### ---CONTROLLER_START---
package com.example.demo.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.example.demo.entity.User;
import com.example.demo.request.UserRequests;
import com.example.demo.response.UserResponses;
import com.example.demo.service.UserService;

@RestController
@RequestMapping("/api/users")
public class UserController {

    private final UserService service;

    public UserController(UserService service) {
        this.service = service;
    }

    // 获取用户列表
    @GetMapping
    public ResponseEntity<?> getUsers(@RequestParam(required = false) String role,
                                      @RequestParam(defaultValue = "1") int page,
                                      @RequestParam(defaultValue = "10") int size) {
        try {
            UserRequests.GetUsersRequest request = new UserRequests.GetUsersRequest();
            request.setRole(role);
            UserResponses.GetUsersResponse response = service.listUsers(request, page, size);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new UserResponses.DeleteUserResponse("INTERNAL_ERROR", "数据查询失败"));
        }
    }

    // 删除用户
    @DeleteMapping("/{userId}")
    public ResponseEntity<?> deleteUser(@PathVariable Long userId) {
        boolean deleted = service.deleteUser(userId);
        if (deleted) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(new UserResponses.DeleteUserResponse("USER_NOT_FOUND", "用户不存在"));
        }
    }
}
### ---CONTROLLER_END---