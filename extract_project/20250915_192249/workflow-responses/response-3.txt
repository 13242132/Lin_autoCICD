### ---CRUD_AI_OUTPUT_START---

### ---CLASS_NAMES_START---
controller: SubscriptionController
service: SubscriptionService
repository: SubscriptionRepository
requestClasses: SubscriptionRequests
responseClasses: SubscriptionResponses
### ---CLASS_NAMES_END---

### ---REPOSITORY_START---
package com.example.demo.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.example.demo.entity.Subscription;
import com.example.demo.entity.User;

@Repository
public interface SubscriptionRepository extends JpaRepository<Subscription, Long> {
    
    // 单表：根据用户ID查询订阅列表
    @Query("SELECT s FROM Subscription s WHERE s.userId = :userId")
    List<Subscription> findByUserId(@Param("userId") Long userId);
    
    // 单表：根据用户ID和主题名查询订阅记录是否存在
    @Query("SELECT s FROM Subscription s WHERE s.userId = :userId AND s.topicName = :topicName")
    Optional<Subscription> findByUserIdAndTopicName(@Param("userId") Long userId, @Param("topicName") String topicName);
    
    // 单表：根据用户ID统计订阅数量
    @Query("SELECT COUNT(s) FROM Subscription s WHERE s.userId = :userId")
    long countByUserId(@Param("userId") Long userId);
    
    // 单表：根据用户ID和订阅ID查询订阅记录
    @Query("SELECT s FROM Subscription s WHERE s.userId = :userId AND s.id = :subscriptionId")
    Optional<Subscription> findByUserIdAndId(@Param("userId") Long userId, @Param("subscriptionId") Long subscriptionId);
    
    // 单表：插入订阅记录
    default Subscription insert(Subscription entity) {
        return save(entity);
    }
    
    // 单表：删除订阅记录
    default void deleteByUserIdAndId(Long userId, Long subscriptionId) {
        deleteByUserIdAndId(userId, subscriptionId);
    }
}
### ---REPOSITORY_END---

### ---REQUEST_CLASSES_START---
package com.example.demo.request;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

public class SubscriptionRequests {
    
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class CreateSubscriptionRequest {
        private String topicName;
    }
}
### ---REQUEST_CLASSES_END---

### ---SERVICE_START---
package com.example.demo.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.entity.Subscription;
import com.example.demo.entity.User;
import com.example.demo.exception.BusinessException;
import com.example.demo.repository.SubscriptionRepository;
import com.example.demo.repository.UserRepository;
import com.example.demo.request.SubscriptionRequests;
import com.example.demo.response.SubscriptionResponses;

@Service
public class SubscriptionService {
    
    private final SubscriptionRepository subscriptionRepository;
    private final UserRepository userRepository;
    
    public SubscriptionService(SubscriptionRepository subscriptionRepository, UserRepository userRepository) {
        this.subscriptionRepository = subscriptionRepository;
        this.userRepository = userRepository;
    }
    
    // 获取用户订阅列表
    public List<SubscriptionResponses.SubscriptionItem> getSubscriptionsByUserId(Long userId) {
        // 验证用户是否存在
        if (!userRepository.existsById(userId)) {
            throw new BusinessException("USER_NOT_FOUND", "用户不存在");
        }
        
        List<Subscription> subscriptions = subscriptionRepository.findByUserId(userId);
        
        return subscriptions.stream()
                .map(sub -> {
                    SubscriptionResponses.SubscriptionItem item = new SubscriptionResponses.SubscriptionItem();
                    item.setId(sub.getId());
                    item.setTopicName(sub.getTopicName());
                    item.setSubscribedAt(sub.getSubscribedAt());
                    return item;
                })
                .collect(Collectors.toList());
    }
    
    // 创建用户订阅关系
    public SubscriptionResponses.CreateSubscriptionResponse createSubscription(Long userId, SubscriptionRequests.CreateSubscriptionRequest request) {
        // 验证用户是否存在
        if (!userRepository.existsById(userId)) {
            throw new BusinessException("USER_NOT_FOUND", "用户不存在");
        }
        
        // 检查是否已订阅该主题
        Optional<Subscription> existingSubscription = subscriptionRepository.findByUserIdAndTopicName(userId, request.getTopicName());
        if (existingSubscription.isPresent()) {
            throw new BusinessException("SUBSCRIPTION_EXISTS", "该主题已订阅");
        }
        
        // 检查订阅数量限制
        long subscriptionCount = subscriptionRepository.countByUserId(userId);
        if (subscriptionCount >= 5) {
            throw new BusinessException("SUBSCRIPTION_LIMIT_EXCEEDED", "最多只能订阅5个主题");
        }
        
        // 创建新订阅
        Subscription subscription = new Subscription();
        subscription.setUserId(userId);
        subscription.setTopicName(request.getTopicName());
        subscription.setSubscribedAt(LocalDateTime.now());
        
        Subscription saved = subscriptionRepository.insert(subscription);
        
        SubscriptionResponses.CreateSubscriptionResponse response = new SubscriptionResponses.CreateSubscriptionResponse();
        response.setId(saved.getId());
        response.setUserId(saved.getUserId());
        response.setTopicName(saved.getTopicName());
        response.setSubscribedAt(saved.getSubscribedAt());
        
        return response;
    }
    
    // 删除用户订阅关系
    public void deleteSubscription(Long userId, Long subscriptionId) {
        // 验证用户是否存在
        if (!userRepository.existsById(userId)) {
            throw new BusinessException("USER_NOT_FOUND", "用户不存在");
        }
        
        // 验证订阅记录是否存在且属于该用户
        Optional<Subscription> subscriptionOpt = subscriptionRepository.findByUserIdAndId(userId, subscriptionId);
        if (!subscriptionOpt.isPresent()) {
            throw new BusinessException("SUBSCRIPTION_NOT_FOUND", "订阅记录不存在");
        }
        
        // 删除订阅记录
        subscriptionRepository.deleteById(subscriptionId);
    }
}
### ---SERVICE_END---

### ---RESPONSE_CLASSES_START---
package com.example.demo.response;

import java.time.LocalDateTime;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

public class SubscriptionResponses {
    
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class SubscriptionItem {
        private Long id;
        private String topicName;
        private LocalDateTime subscribedAt;
    }
    
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class CreateSubscriptionResponse {
        private Long id;
        private Long userId;
        private String topicName;
        private LocalDateTime subscribedAt;
    }
}
### ---RESPONSE_CLASSES_END---

### ---CONTROLLER_START---
package com.example.demo.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.example.demo.entity.Subscription;
import com.example.demo.request.SubscriptionRequests;
import com.example.demo.response.SubscriptionResponses;
import com.example.demo.service.SubscriptionService;

@RestController
@RequestMapping("/api/users/{userId}/subscriptions")
public class SubscriptionController {
    
    private final SubscriptionService subscriptionService;
    
    public SubscriptionController(SubscriptionService subscriptionService) {
        this.subscriptionService = subscriptionService;
    }
    
    // 获取用户订阅主题列表
    @GetMapping
    public ResponseEntity<List<SubscriptionResponses.SubscriptionItem>> getSubscriptions(
            @PathVariable Long userId) {
        List<SubscriptionResponses.SubscriptionItem> subscriptions = subscriptionService.getSubscriptionsByUserId(userId);
        return ResponseEntity.ok(subscriptions);
    }
    
    // 创建用户订阅关系
    @PostMapping
    public ResponseEntity<SubscriptionResponses.CreateSubscriptionResponse> createSubscription(
            @PathVariable Long userId,
            @RequestBody SubscriptionRequests.CreateSubscriptionRequest request) {
        SubscriptionResponses.CreateSubscriptionResponse response = subscriptionService.createSubscription(userId, request);
        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }
    
    // 删除用户订阅关系
    @DeleteMapping("/{subscriptionId}")
    public ResponseEntity<Void> deleteSubscription(
            @PathVariable Long userId,
            @PathVariable Long subscriptionId) {
        subscriptionService.deleteSubscription(userId, subscriptionId);
        return ResponseEntity.noContent().build();
    }
}
### ---CONTROLLER_END---
### ---CRUD_AI_OUTPUT_END---