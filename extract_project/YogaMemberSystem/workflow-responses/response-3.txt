### ---CRUD_AI_OUTPUT_START---

### ---CLASS_NAMES_START---
controller: AppointmentController
service: AppointmentService
repository: AppointmentRepository
### ---CLASS_NAMES_END---

### ---REPOSITORY_START---
package com.example.demo.repository;

import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.example.demo.entity.Appointment;

@Repository
public interface AppointmentRepository extends JpaRepository<Appointment, Long> {
    // 多表接口：获取我的预约，返回默认值
    default List<Appointment> findMyAppointments(String status) {
        return List.of();
    }
}
### ---REPOSITORY_END---

### ---SERVICE_START---
package com.example.demo.service;

import java.util.List;
import java.time.LocalDateTime;
import org.springframework.stereotype.Service;
import com.example.demo.entity.Appointment;
import com.example.demo.repository.AppointmentRepository;

@Service
public class AppointmentService {
    private final AppointmentRepository repository;

    public AppointmentService(AppointmentRepository repository) {
        this.repository = repository;
    }

    // 单表：创建预约
    public Appointment createAppointment(Appointment appointment) {
        appointment.setStatus("已预约");
        appointment.setCreatedAt(LocalDateTime.now());
        return repository.save(appointment);
    }

    // 多表接口：获取我的预约，返回默认值
    public List<Appointment> getMyAppointments(String status) {
        return repository.findMyAppointments(status);
    }

    // 单表：取消预约
    public void cancelAppointment(Long id) {
        repository.deleteById(id);
    }
}
### ---SERVICE_END---

### ---CONTROLLER_START---
package com.example.demo.controller;

import java.util.List;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.example.demo.entity.Appointment;
import com.example.demo.service.AppointmentService;

@RestController
@RequestMapping("/api/appointments")
public class AppointmentController {
    private final AppointmentService service;

    public AppointmentController(AppointmentService service) {
        this.service = service;
    }

    // 课程预约
    @PostMapping
    public ResponseEntity<?> createAppointment(@RequestBody Appointment appointment) {
        try {
            Appointment created = service.createAppointment(appointment);
            return ResponseEntity.status(HttpStatus.CREATED).body(created);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ErrorResponse("APPOINTMENT_FAILED", "预约失败，课程已满或已预约"));
        }
    }

    // 获取我的预约
    @GetMapping("/my")
    public ResponseEntity<?> getMyAppointments(@RequestParam(required = false) String status) {
        try {
            List<Appointment> appointments = service.getMyAppointments(status);
            return ResponseEntity.ok(appointments);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(new ErrorResponse("UNAUTHORIZED", "未授权访问"));
        }
    }

    // 取消预约
    @DeleteMapping("/{id}")
    public ResponseEntity<?> cancelAppointment(@PathVariable Long id) {
        try {
            service.cancelAppointment(id);
            return ResponseEntity.ok(new MessageResponse("预约取消成功"));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(new ErrorResponse("CANCEL_FAILED", "取消失败，已超过可取消时间"));
        }
    }

    // 错误响应类
    private static class ErrorResponse {
        private String error;
        private String message;

        public ErrorResponse(String error, String message) {
            this.error = error;
            this.message = message;
        }

        public String getError() {
            return error;
        }

        public String getMessage() {
            return message;
        }
    }

    // 成功消息响应类
    private static class MessageResponse {
        private String message;

        public MessageResponse(String message) {
            this.message = message;
        }

        public String getMessage() {
            return message;
        }
    }
}
### ---CONTROLLER_END---