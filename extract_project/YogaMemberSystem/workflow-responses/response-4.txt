### ---CRUD_AI_OUTPUT_START---

### ---CLASS_NAMES_START---
controller: CheckInController
service: CheckInService
repository: CheckInRepository
### ---CLASS_NAMES_END---

### ---REPOSITORY_START---
package com.example.demo.repository;

import com.example.demo.entity.CheckIn;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.Optional;

@Repository
public interface CheckInRepository extends JpaRepository<CheckIn, Long> {
    // 单表：根据课程ID和会员ID查询签到记录
    Optional<CheckIn> findByCourseIdAndMemberId(Long courseId, Long memberId);
    
    // 单表：插入签到记录
    default CheckIn insert(CheckIn entity) {
        return save(entity);
    }
}
### ---REPOSITORY_END---

### ---SERVICE_START---
package com.example.demo.service;

import com.example.demo.entity.CheckIn;
import com.example.demo.repository.CheckInRepository;
import org.springframework.stereotype.Service;
import java.util.Optional;

@Service
public class CheckInService {
    private final CheckInRepository repository;

    public CheckInService(CheckInRepository repository) {
        this.repository = repository;
    }

    // 创建签到记录
    public CheckIn createCheckIn(CheckIn checkIn) {
        // 检查是否已签到（单表查询）
        Optional<CheckIn> existing = repository.findByCourseIdAndMemberId(checkIn.getCourseId(), checkIn.getMemberId());
        if (existing.isPresent()) {
            throw new RuntimeException("CHECKIN_FAILED"); // 模拟已签到错误
        }
        // 忽略未预约检查，直接设置状态并保存
        checkIn.setStatus("已签到");
        return repository.insert(checkIn);
    }
}
### ---SERVICE_END---

### ---CONTROLLER_START---
package com.example.demo.controller;

import com.example.demo.entity.CheckIn;
import com.example.demo.service.CheckInService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/checkins")
public class CheckInController {
    private final CheckInService service;

    public CheckInController(CheckInService service) {
        this.service = service;
    }

    @PostMapping
    public ResponseEntity<?> createCheckIn(@RequestBody CheckIn checkIn) {
        try {
            CheckIn created = service.createCheckIn(checkIn);
            return ResponseEntity.ok(created);
        } catch (RuntimeException e) {
            if ("CHECKIN_FAILED".equals(e.getMessage())) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .body(new ErrorResponse("CHECKIN_FAILED", "签到失败，未预约或已签到"));
            } else {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(new ErrorResponse("INTERNAL_ERROR", e.getMessage()));
            }
        }
    }

    // 错误响应类
    private static class ErrorResponse {
        private String error;
        private String message;

        public ErrorResponse(String error, String message) {
            this.error = error;
            this.message = message;
        }

        public String getError() {
            return error;
        }

        public String getMessage() {
            return message;
        }
    }
}
### ---CONTROLLER_END---

### ---CRUD_AI_OUTPUT_END---